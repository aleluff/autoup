#!/bin/bash

# @author Usb Key
# @mail usbkey9@gmail.com

#This script auto update current repo
#It's designed to recall script in parameter with same arguments after updating
#It has been develop to be call by every directly callable script
#It prevent to be execute too many times so don't worry if yours scripts call themselves

#Follow symlink and cd to right directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

if [[ -z "$1" ]]; then
	echo "You have to pass caller script id as parameter (./autoup \$$)";
	exit;
fi

ppid=$1;

#Continue normal execution (not a git repo or up-to-date)
function normalEx(){

	exit;
}

#Update Success, need to reload script
function reloadEx(){

	cmdl=$(cat -v /proc/$ppid/cmdline | sed 's/\^@/\ /g' && echo)

	$cmdl;
	echo;
	kill $ppid;
}

#All is in the name
function errorEx(){

	echo "Error while git auto-update. Exiting Now!";
	exit;
}

function checkTimeStamp() {

	local file="autoup.tmp";
	local ts=$(date +%s);
	local fileTs=0;

	if [[ -f $file ]]; then	fileTs=$(($(cat $file)+3600)); fi

	if [[ $fileTs > $ts ]]; then
		#Consider as up-to-date (useful when call multiple time by other script)
		normalEx
	else
		echo $ts > $file
	fi
}

function refresh() {

	su $userName -c "git fetch -aq"
	local=$(git rev-parse HEAD);
	base=$(git rev-parse @{u});
}

function checkPass() {

	echo "User: $userName";
	try=0;
	test=$(su $userName -c "echo 1");

	while [[ ! $test = 1 ]] && [[ $try < 2 ]]; do
		((try++))
	   test=$(su $userName -c "echo 1");
	done

	if [[ ! $test = 1 ]]; then normalEx; fi
}

#Test if code auto update is activated
if [[ ! -f ./autoup.on ]]; then normalEx; fi

if [[ ! -f ./autoup.debug ]]; then checkTimeStamp; fi

#Test if it's a valid git repo
if [[ ! -d .git || $(git rev-list --all --count) == 0 ]]; then
	normalEx
fi

userName=$(stat -c '%U' $0)

checkPass

refresh

if [ ! $local = $base ]; then
	echo
	echo "Code Updating...";
	su $userName -c "git pull -q"
	refresh
	if [ ! $local = $base ]; then
		#ERROR: Repo still outdated
		errorEx
	else
		echo
		echo "Code Successfully Updated";
		#Repo successfully updated
		reloadEx
	fi
fi

#Repo up-to-date
normalEx
